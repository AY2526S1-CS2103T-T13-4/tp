@startuml
!include style.puml
skinparam ArrowFontStyle plain

actor User as user USER_COLOR
participant ":UI" as ui UI_COLOR
participant ":Logic" as logic LOGIC_COLOR
participant ":Model" as model MODEL_COLOR
participant ":CourseBookParser" as parser LOGIC_COLOR_T1
participant ":AddTagCommand" as command LOGIC_COLOR_T2
participant ":Course" as course MODEL_COLOR_T1

' ==========================
' 1. User executes command
' ==========================

user -[USER_COLOR]> ui : "addtag 1 t/Dr Tan teaches this course"
activate ui UI_COLOR

ui -[UI_COLOR]> logic : execute("addtag 1 t/Dr Tan teaches this course")
activate logic LOGIC_COLOR

logic -[LOGIC_COLOR]> parser : parseCommand("addtag 1 t/Dr Tan teaches this course")
activate parser LOGIC_COLOR_T1

parser -[LOGIC_COLOR_T1]> command : new AddTagCommand(Index(1), Tag("Dr Tan teaches this course"))
activate command LOGIC_COLOR_T2

deactivate parser

' ==========================
' 2. Execute AddTagCommand
' ==========================

logic -[LOGIC_COLOR]> command : execute(model)
activate command LOGIC_COLOR_T2

command -[LOGIC_COLOR_T2]> model : getFilteredCourseList()
activate model MODEL_COLOR
model --[MODEL_COLOR]> command : List<Course>
deactivate model

command -[LOGIC_COLOR_T2]> course : withAddedTag(new Tag("Dr Tan teaches this course"))
activate course MODEL_COLOR_T1
deactivate course

command -[LOGIC_COLOR_T2]> model : setCourse(originalCourse, updatedCourse)
activate model MODEL_COLOR
model --[MODEL_COLOR]> command : confirmation
deactivate model

command --[LOGIC_COLOR_T2]> logic : new CommandResult("Tag added to course: CS2103T")
deactivate command

' ==========================
' 3. Return results to UI
' ==========================

logic --[LOGIC_COLOR]> ui : CommandResult
deactivate logic

ui --[UI_COLOR]> user
deactivate ui

@enduml
